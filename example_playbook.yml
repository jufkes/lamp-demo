---
- name: Create a group and server with public ip address
  hosts: localhost
  gather_facts: False
  connection: local
  tasks: 
	- name: CLC | Generate Server Admin Password
	  command: openssl rand -base64 15
	  register: serverpass
	  changed_when: False

	- name: CLC | Create HAPROXY Group
	  clc_group:
	    name: HAPROXY
	    location: "{{ datacenter }}"
	    state: present

	- name: CLC | Build HAPROXY Server if Needed
	  clc_server:
	    name: HAPXY
	    location: "{{ datacenter }}"
	    template: ubuntu-14-64
	    password: "{{ serverpass.stdout }}"
	    exact_count: 1
	    group: HAPROXY
	    count_group: HAPROXY
	    cpu: "{{ cpu }}" 
	    memory: "{{ memory }}"
	    type: "{{ type }}"
	    storage_type: "{{ storage_type }}"
	  register: haproxy

	- name: CLC | Add public ipaddress
	  clc_publicip:
	    server_ids: "{{ item.name }}"
	    ports:
	      - "80"
	    state: present
	  with_flattened: haproxy.servers

	- name: Wait for SSH to Come up on New Servers
	  wait_for: host={{ item.ipaddress }} port=22 delay=5 timeout=320 state=started
	  with_flattened:
	    - haproxy.servers

	- name: Update known_hosts With New Servers
	  shell: "ssh-keygen -R {{ item.ipaddress }} && ssh-keyscan -t rsa -H {{ item.ipaddress }} >> ~/.ssh/known_hosts"
	  with_flattened:
	    - haproxy.servers

	- name: Deploy SSH Key to New Servers (Ubuntu)
	  shell: "echo '{{ public_key }}'|sshpass -p '{{ serverpass.stdout }}' ssh root@{{ item.ipaddress }} 'cat >> ~/.ssh/authorized_keys'"
	  with_flattened:
	    - haproxy.servers

	- name: Add New Servers to an in-memory Group
	  add_host:
	    name={{ item.name }}
	    ansible_ssh_host={{ item.ipaddress }}
	    ansible_ssh_user=root
	    ansible_ssh_private_key_file={{ default_ssh_key_path }}
	    groupname=HAPROXY
	  with_items: haproxy.servers

	- name: Download and install haproxy and socat
	  apt: name={{ item }} state=present
	  with_items:
		  - haproxy
		  - socat

	- name: Configure the haproxy cnf file with hosts
	  template: src=haproxy.cfg.j2 dest=/etc/haproxy/haproxy.cfg
	  notify: restart haproxy

	- name: Ensure that haproxy is enabled on Ubuntu
	  replace: dest=/etc/default/haproxy regexp="ENABLED=0" replace='ENABLED=1'

	- name: Start the haproxy service
	  service: name=haproxy state=started enabled=yes
